name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '10.0.x' 
  RUST_VERSION: 'stable'

jobs:
  # 代码质量检查
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 🦀 Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}

    - name: 📦 Restore dependencies
      run: dotnet restore

    - name: 🔍 Check .NET format
      run: dotnet format --verify-no-changes --verbosity diagnostic
      continue-on-error: true

    - name: 🔍 Check Rust format
      working-directory: ./native
      run: cargo fmt --all -- --check
      continue-on-error: true

    - name: 🧹 Rust Clippy
      working-directory: ./native
      run: cargo clippy -- -D warnings
      continue-on-error: true

  # Windows 构建
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: code-quality
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 🦀 Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: 📦 Cache NuGet
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}

    - name: 📦 Cache Rust
      uses: actions/cache@v4
      with:
        path: |
          native/target
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-rust-${{ hashFiles('native/Cargo.lock') }}

    - name: 🏗️ Build
      run: dotnet build --configuration Release

    - name: 📦 Publish
      run: dotnet publish WordLens/WordLens.csproj -c Release -r win-x64 -o ./publish/win-x64

    - name: 📤 Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: wordlens-windows-x64
        path: ./publish/win-x64/

  # Linux 构建
  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 🦀 Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: 📦 Install X11 dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libx11-dev libxrandr-dev libxi-dev

    - name: 📦 Cache NuGet
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}

    - name: 📦 Cache Rust
      uses: actions/cache@v4
      with:
        path: |
          native/target
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-rust-${{ hashFiles('native/Cargo.lock') }}

    - name: 🏗️ Build
      run: dotnet build --configuration Release

    - name: 📦 Publish
      run: dotnet publish WordLens/WordLens.csproj -c Release -r linux-x64 -o ./publish/linux-x64

    - name: 📤 Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: wordlens-linux-x64
        path: ./publish/linux-x64/

  # macOS 构建
  build-macos:
    name: Build macOS
    runs-on: macos-latest
    needs: code-quality
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 🦀 Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: 📦 Cache NuGet
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}

    - name: 📦 Cache Rust
      uses: actions/cache@v4
      with:
        path: |
          native/target
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-rust-${{ hashFiles('native/Cargo.lock') }}

    - name: 🏗️ Build
      run: dotnet build --configuration Release

    - name: 📦 Publish (x64)
      run: dotnet publish WordLens/WordLens.csproj -c Release -r osx-x64 -o ./publish/osx-x64

    - name: 📦 Publish (arm64)
      run: dotnet publish WordLens/WordLens.csproj -c Release -r osx-arm64 -o ./publish/osx-arm64

    - name: 📤 Upload x64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: wordlens-macos-x64
        path: ./publish/osx-x64/

    - name: 📤 Upload arm64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: wordlens-macos-arm64
        path: ./publish/osx-arm64/
